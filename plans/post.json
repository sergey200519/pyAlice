{
  "state": {
    "session": {
      "from": "from_",
      "to": "to",
      "departure": "departure",
      "price": "price",
      "stops": "stops",
      "time": "time",
      "date": "date",
      "title": "title",
      "arrival": "arrival"
    }
  },
  "session_state": {
    "from": "from_",
    "to": "to",
    "departure": "departure",
    "price": "price",
    "stops": "stops",
    "time": "time",
    "date": "date",
    "title": "title",
    "arrival": "arrival"
  },
  "version": "event['version']",
  "session": "event['session']",
  "response": {
    "buttons": "buttons_list",
    "text": "str(text)",
    "end_session": false
  },
}




















def handler(event, context):
    status = False
    flag = False
    buttons_list_local = []
    """
    Entry-point for Serverless Function.
    :param event: request payload.
    :param context: information about current execution context.
    :return: response to be serialized as JSON.
    """
    text = dialogs["autification"]
    if 'request' in event and \
            'original_utterance' in event['request'] \
            and len(event['request']['original_utterance']) > 0:
        text = distribution(event)
    else:
        try:
            text = distribution(event)
        except:
            pass
    try:
        try:
            if type(text) == dict:
                try:
                    temp = text
                    status = temp.get("status")
                    text = str(temp.get("text"))
                except:
                    text = "gh"
        except:
            text = "error button"

    except:
        text = "total error"
    if type(text) == list:
        return {
            'version': event['version'],
            'session': event['session'],
            'response': {
                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                'text': dialogs["end"],
                # Don't finish the session after this response.
                'end_session': 'True'
            },
        }
    if not status:
        buttons_list_local = [{
                        "title": "Команды",
                        "payload": {
                            "title": "commands"
                        },
                        "hide": True
                        },
                        {
                            "title": "Возможности",
                            "payload": {
                                "title": "func"
                            },
                            "hide": True
                        }]
        flag = True
    # text = str(status)
    if event["session"]["new"]:
        text = dialogs["autification"]
    from_, to, departure, stops, time, date, title, arrival = "", "", "",  "", "", "", "", ""
    if params == {}:
        try:
            from_ = event["state"]["session"]["from"]
            to = event["state"]["session"]["to"]
            departure = event["state"]["session"]["departure"]
            price = event["state"]["session"]["price"]
            stops = event["state"]["session"]["stops"]
            time = event["state"]["session"]["time"]
            date = event["state"]["session"]["date"]
            title = event["state"]["session"]["title"]
            arrival = event["state"]["session"]["arrival"]
        except:
            pass
    else:
        from_ = params.get("from")
        to = params.get("to")
        departure = params.get("departure")
        price = params.get("price")
        stops = params.get("stops")
        time = params.get("time")
        date = params.get("date")
        title = params.get("title")
        arrival = params.get("arrival")
    try:
        return {
            "state": {
                "session": {
                    "from": from_,
                    "to": to,
                    "departure": departure,
                    "price": price,
                    "stops": stops,
                    "time": time,
                    "date": date,
                    "title": title,
                    "arrival": arrival
                }
            },
            "session_state": {
                "from": from_,
                "to": to,
                "departure": departure,
                "price": price,
                "stops": stops,
                "time": time,
                "date": date,
                "title": title,
                "arrival": arrival
            },
            'version': event['version'],
            'session': event['session'],
            'response': {
                "buttons": buttons_list if not flag else buttons_list_local,
                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                'text': str(text),
                # Don't finish the session after this response.
                'end_session': 'false'
            },
        }
    except:
        return {
            'version': event['version'],
            'session': event['session'],
            'response': {
                "buttons": buttons_list if not flag else buttons_list_local,
                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                'text': str(text),
                # Don't finish the session after this response.
                'end_session': 'false'
            },
        }
